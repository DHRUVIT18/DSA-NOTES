Dsu - Disjoint Set and Union

it works only two operations 
 
1) combines two given sets (Union)

2) tell if two members belongs to same set or not (Find)

Tc:O(n)
int find(int i ,vector<int>&parent){
    if(i==parent[i])return i;

    return find(parent[i],parent);
}

void union(int x,int y,vector<int>&parent){
    int x_parent=find(x,parent);
    int y_parent=find(y,parent);

    if(x_parent!=y_parent){
        parent[x_parent]=y_parent;
    }

}

Rank and Path Compression


Path Compression - update parent every time recursion calls

int find(int i ,vector<int>&parent){
    if(i==parent[i])return i;

    return parent[i] =  find(parent[i],parent);
}

void union(int x,int y,vector<int>&parent,vector<int>&rank){
    int x_parent=find(x,parent);
    int y_parent=find(y,parent);

    

    if(x_parent!=y_parent){
        if(rank[x_parent]>rank[y_parent]){
            parent[y_parent]=x_parent;
        }else if(rank[x_parent]<rank[y_parent]){
            parent[x_parent]=y_parent;
        }else{
            parent[y_parent]=x_parent;
            rank[x_parent]++; 
        }   
    }

}